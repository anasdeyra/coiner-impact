generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity","fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  oauth_token     String? @db.Text
  oauth_token_secret      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  articles      Article[]
  //custome fields
  role          Role      @default(user)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  //defaults
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  //attributes
  title           String           @unique @db.VarChar(255)
  content         String           @db.LongText
  slug            String           @unique @db.VarChar(255)
  topic           Topic
  imageUrl        String           @unique
  //publishing
  isPublished     Boolean          @default(false)
  publishedAt     DateTime
  author          User             @relation(fields: [authorId], references: [id])
  authorId        String
  Featured_Article Featured_Article?
}

model Featured_Article {
  articleId Int      @unique
  featured  Featured @id
  article   Article  @relation(fields: articleId, references: id)
}

enum Topic {
  nft
  crypto
  web3
  blockcain
  cyber
}

enum Role {
  admin
  author
  user
}

enum Featured {
  featured
}
